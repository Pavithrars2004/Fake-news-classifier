# -*- coding: utf-8 -*-
"""Fake news classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jagoll44LHwKPfF07yR8KdBMjwH7M7cB
"""

!pip install transformers datasets sklearn

pip install --upgrade datasets fsspec

from datasets import load_dataset

dataset = load_dataset("chengxuphd/liar2", split="train")

from datasets import load_dataset
from transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer, pipeline
from sklearn.metrics import accuracy_score, f1_score, precision_recall_fscore_support
import numpy as np

train_dataset = load_dataset("chengxuphd/liar2", split="train")
val_dataset = load_dataset("chengxuphd/liar2", split="validation")
test_dataset = load_dataset("chengxuphd/liar2", split="test")

model_checkpoint = "roberta-base"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)

def preprocess_function(examples):
    return tokenizer(examples["statement"], truncation=True, padding="max_length", max_length=128)

train_dataset = train_dataset.map(preprocess_function, batched=True)
val_dataset = val_dataset.map(preprocess_function, batched=True)
test_dataset = test_dataset.map(preprocess_function, batched=True)

train_dataset = train_dataset.rename_column("label", "labels")
val_dataset = val_dataset.rename_column("label", "labels")
test_dataset = test_dataset.rename_column("label", "labels")

train_dataset.set_format("torch", columns=["input_ids", "attention_mask", "labels"])
val_dataset.set_format("torch", columns=["input_ids", "attention_mask", "labels"])
test_dataset.set_format("torch", columns=["input_ids", "attention_mask", "labels"])

model = AutoModelForSequenceClassification.from_pretrained(model_checkpoint, num_labels=6)

def compute_metrics(pred):
    labels = pred.label_ids
    preds = np.argmax(pred.predictions, axis=1)
    acc = accuracy_score(labels, preds)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average="macro")
    return {
        "accuracy": acc,
        "f1_macro": f1,
        "precision": precision,
        "recall": recall
    }

!pip install --upgrade transformers

!pip install --upgrade transformers

training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=3,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    learning_rate=2e-5,
    weight_decay=0.01
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    compute_metrics=compute_metrics
)

!pip install --upgrade accelerate
!pip install --upgrade transformers datasets scikit-learn accelerate

trainer.train()

classifier = pipeline("text-classification", model=trainer.model, tokenizer=tokenizer)

sample_text = "The president announced a new healthcare reform that will cut costs by 30%."
prediction = classifier(sample_text)
print(f"Prediction: {prediction}")